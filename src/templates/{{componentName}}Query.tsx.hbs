import React, { Suspense, useEffect } from 'react';
import {
  graphql,
  PreloadedQuery,
  usePreloadedQuery,
  useQueryLoader
} from 'react-relay';
import { {{componentName}}Query as {{componentName}}QueryType } from '__generated__/{{componentName}}Query.graphql';
import {{componentName}}, { {{componentName}}Loader } from '.';

const query = graphql`
  {{query.raw}}
`;

type QueryProps = {
  queryRef: PreloadedQuery<{{componentName}}QueryType>;
};

export const {{componentName}}Query = (props: QueryProps) => {
  const data = usePreloadedQuery(query, props.queryRef);

  if({{#each query.fragments}}!data.{{this.dataPath}} ||{{/each}}) {
    return null;
  }

  return <{{componentName}} {{#each query.fragments}}{{this.propName}}={ data.{{this.dataPath}} }{{/each}} />;
};

const {{componentName}}QueryLoader = () => {
  const [
    queryRef,
    loadQuery,
    disposeQuery
  ] = useQueryLoader<{{componentName}}QueryType>(query);

  useEffect(() => {
    loadQuery({});

    return () => {
      disposeQuery();
    }
  }, []);

  return (
    <Suspense fallback={ <{{componentName}}Loader /> } >
      {queryRef ? (
        <{{componentName}}Query queryRef={queryRef} />
      ) : null}
    </Suspense>
  );
};

export default {{componentName}}QueryLoader;
